# Required tool versions
MIN_CMAKE_VERSION = 3.13
MIN_CPPCHECK_VERSION = 2.10

# Commands
CMAKE = cmake
MAKE = make
CP = cp
RM = rm -rf
MKDIR = mkdir -p
CPPCHECK = cppcheck
FORMAT = clang-format

# Color for help output
YELLOW := \033[1;33m
BLUE := \033[1;34m
NC := \033[0m

# Directories
PICOPROJ_DIR := $(shell pwd)
BUILD = $(PICOPROJ_DIR)/build
PICOSRC_DIR = $(PICOPROJ_DIR)/src
PICO_TARGET_DIR ?= $(shell lsblk -o MOUNTPOINT,LABEL | grep "RPI-RP2" | awk '{print $$1}')

# Files
PROJECT_NAME ?= pwm_motor_control
TARGET = $(BUILD)/$(PROJECT_NAME).uf2
MAKEFILE = $(BUILD)/Makefile
PICOSRC_FILES := $(shell find $(PICOSRC_DIR) -type f \( -name "*.cpp" -o -name "*.hpp" \))

# Check the set folder and file directories to actual directories
define CHECK_BUILD_DIR
	@echo "Checking build environment..."
	@echo "BUILD=$(BUILD)"
	@ls $(BUILD) | tr ':' '\n' || true
	@echo "PICO_TARGET_DIR=$(PICO_TARGET_DIR)"
	@ls $(PICO_TARGET_DIR) | tr ':' '\n' || true
endef

# Version Checking
define CHECK_VERSION
	@echo "Checking tool versions..."
	@cmake_version=$$($(CMAKE) --version | head -n1 | cut -d' ' -f3); \
	if [ "$$(printf '%s\n' "$(MIN_CMAKE_VERSION)" "$$cmake_version" | sort -V | head -n1)" != "$(MIN_CMAKE_VERSION)" ]; then \
		echo "Error: CMAKE version $$cmake_version is less than required version $(MIN_CMAKE_VERSION)"; \
		exit 1; \
	fi
	@cppcheck_version=$$($(CPPCHECK) --version | head -n1 | cut -d' ' -f2); \
	if [ "$$(printf '%s\n' "$(MIN_CPPCHECK_VERSION)" "$$cppcheck_version" | sort -V | head -n1)" != "$(MIN_CPPCHECK_VERSION)" ]; then \
		echo "Error: CPPCHECK version $$cppcheck_version is less than the required version $(CPPCHECK)"; \
		exit 1; \
	fi
endef

# Check target
check:
	$(CHECK_BUILD_DIR)
	$(CHECK_VERSION)
	@echo "All checks passed successfully!"

#Build
## If Makefile in build directory exist, the 'make build' will build the project generating necessary files 
build: check format cppcheck
	@if [ -d "$(BUILD)" ]; then \
		cd $(BUILD) && \
		if [ -f "$(MAKEFILE)" ]; then \
			echo "Building project..."; \
			$(MAKE); \
		else \
			echo "Makefiles don't exist in build directory"; \
		fi; \
	else \
		echo "Build directory don't exist. Run 'make rebuild' first"; \
	fi

## Recreate build directory and run cmake
rebuild: check
	@if [ -d "$(BUILD)" ]; then \
		echo "Removing existing build directory..."; \
		$(RM) $(BUILD); \
	else \
		echo "Build directory does not exist, skipping removal."; \
	fi; \
	echo "Creating build directory and run cmake from project root directory..."; \
	$(MKDIR) $(BUILD); \
	cd $(BUILD) && $(CMAKE) -G "Unix Makefiles" ..

## Run cppcheck
cppcheck: check
	@$(CPPCHECK) --quiet --enable=all --error-exitcode=1 \
	--suppress=missingIncludeSystem \
	--suppress=missingInclude --suppress=unusedFunction \
	--suppress=unmatchedSuppression --inline-suppr src/ \
	--suppress=invalidPrintfArgType_uint

# Flash
## Copy the .uf2 file generated by Makefile from build dir to board's directory
flash: check
	@echo "Checking target directory at $(PICO_TARGET_DIR)"
	@echo "Checking target file at $(TARGET)"
	@if [ -d "$(PICO_TARGET_DIR)" ]; then \
		echo "Target directory found"; \
		if [ -f "$(TARGET)" ]; then \
			echo "Copying target file to target directory..."; \
			cp $(TARGET) $(PICO_TARGET_DIR); \
			echo "Done!"; \
		else \
			echo "'$(TARGET)' does not exist. Run 'build' first"; \
		fi; \
	else \
		printf "Board's drive doesn't exist. Make sure the board is:\n"; \
		printf "1. Plug properly by holding the BOOTSEL button of the board while inserting the USB to machine.\n"; \
		printf "2. The path to board's drive is set correctly\n"; \
	fi

## Remove the build directory 
clean:
	@echo "Cleaning build directory..."
	$(RM) $(BUILD)

# Help target
help:
	@echo "$(YELLOW)Available targets:$(NC)"
	@echo "$(BLUE)build$(NC)    - Build the project if Makefile exists in build directory"
	@echo "$(BLUE)rebuild$(NC)  - Recreate build directory and run cmake"
	@echo "$(BLUE)clean$(NC)    - Remove build directory"
	@echo "$(BLUE)cppcheck$(NC) - Run static code analysis"
	@echo "$(BLUE)flash$(NC)    - Copy the .uf2 file to the Pico board"
	@echo "$(BLUE)test$(NC)     - Test build environment and compilation"
	@echo "$(BLUE)check$(NC)    - Check tool versions and environment"
	@echo ""
	@echo "\n$(YELLOW)Required tools:$(NC)"
	@echo "cmake     (min v$(MIN_CMAKE_VERSION))"
	@echo "cppcheck  (min v$(MIN_CPPCHECK_VERSION))"

# Formatting
format:
	@$(FORMAT) -i $(PICOSRC_FILES)
# Makefile debug target
test:
	find $(PICOSRC_DIR) -type f \( -name "*.cpp" -o -name "*.hpp" \)
	@echo "${PICOSRC_FILES}" | tr ' ' '\n'

# Phony targets
.PHONY: build rebuild cppcheck flash clean format test help
